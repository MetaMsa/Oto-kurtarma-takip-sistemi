// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace otokurtarma.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.CompaniesModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Company = "Moran"
                        });
                });

            modelBuilder.Entity("Entities.Models.RolesModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Role = "Admin"
                        },
                        new
                        {
                            ID = 2,
                            Role = "User"
                        },
                        new
                        {
                            ID = 3,
                            Role = "Staff"
                        });
                });

            modelBuilder.Entity("Entities.Models.StaffModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompaniesModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesModelId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CompaniesModelId");

                    b.HasIndex("RolesModelId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompaniesModelId = 1,
                            Name = "Mehmet Serhat ASLAN",
                            RolesModelId = 3
                        });
                });

            modelBuilder.Entity("Entities.Models.UsersModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompaniesModelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesModelId")
                        .HasColumnType("int");

                    b.Property<string>("fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompaniesModelId");

                    b.HasIndex("RolesModelId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompaniesModelId = 1,
                            Email = "mehmetserhataslan955@gmail.com",
                            RolesModelId = 1,
                            fullname = "Mehmet Serhat Aslan",
                            password = "XfAxxAYG1bnA0Ak7hoc/+gQ04FbqHHG7XR/7QVAOLWY=",
                            username = "metamsa"
                        },
                        new
                        {
                            ID = 2,
                            CompaniesModelId = 1,
                            Email = "mserhataslan@hotmail.com",
                            RolesModelId = 2,
                            fullname = "Mehmet Serhat Aslan",
                            password = "XfAxxAYG1bnA0Ak7hoc/+gQ04FbqHHG7XR/7QVAOLWY=",
                            username = "meta"
                        });
                });

            modelBuilder.Entity("Entities.Models.VehiclesModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompaniesModelId")
                        .HasColumnType("int");

                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lng")
                        .HasColumnType("real");

                    b.Property<string>("plate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompaniesModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompaniesModelId = 1,
                            lat = 0f,
                            lng = 0f,
                            plate = "03AYS111",
                            price = 10000,
                            type = "Otomobil"
                        });
                });

            modelBuilder.Entity("Entities.Models.StaffModel", b =>
                {
                    b.HasOne("Entities.Models.CompaniesModel", "CompaniesModel")
                        .WithMany("Staffs")
                        .HasForeignKey("CompaniesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.RolesModel", "RolesModel")
                        .WithMany("Staffs")
                        .HasForeignKey("RolesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesModel");

                    b.Navigation("RolesModel");
                });

            modelBuilder.Entity("Entities.Models.UsersModel", b =>
                {
                    b.HasOne("Entities.Models.CompaniesModel", "CompaniesModel")
                        .WithMany("Users")
                        .HasForeignKey("CompaniesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.RolesModel", "RolesModel")
                        .WithMany("Users")
                        .HasForeignKey("RolesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesModel");

                    b.Navigation("RolesModel");
                });

            modelBuilder.Entity("Entities.Models.VehiclesModel", b =>
                {
                    b.HasOne("Entities.Models.CompaniesModel", "CompaniesModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompaniesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesModel");
                });

            modelBuilder.Entity("Entities.Models.CompaniesModel", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entities.Models.RolesModel", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
